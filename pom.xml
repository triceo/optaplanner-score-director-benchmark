<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.optaplanner</groupId>
    <artifactId>optaplanner-score-director-benchmark</artifactId>
    <version>2.0.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>OptaPlanner ScoreDirector benchmark</name>
    <description>
        OptaPlanner solves planning problems.
        This lightweight, embeddable planning engine implements powerful and scalable algorithms
        to optimize business resource scheduling and planning.

        This module builds a benchmark of all the various score directors over various examples.
    </description>
    <url>https://www.optaplanner.org</url>

    <properties>
        <version.org.optaplanner>8.6.0-SNAPSHOT</version.org.optaplanner>
        <version.org.junit>5.7.1</version.org.junit>
        <formatter.skip>true</formatter.skip>
        <java.module.name>org.optaplanner.sdb</java.module.name>
        <java.release>11</java.release>
        <jmh.version>1.29</jmh.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <uberjar.name>benchmarks</uberjar.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-core</artifactId>
            <version>${jmh.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjdk.jmh</groupId>
            <artifactId>jmh-generator-annprocess</artifactId>
            <version>${jmh.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.optaplanner</groupId>
            <artifactId>optaplanner-examples</artifactId>
            <version>${version.org.optaplanner}</version>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>${version.org.junit}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${version.org.junit}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${version.org.junit}</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.8.1</version>
                <configuration>
                    <release>${java.release}</release>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <version>3.2.1</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <finalName>${uberjar.name}</finalName>
                            <filters>
                                <filter> <!-- Disable modularity for all dependencies, in order to not confuse JLink later. -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <exclude>**/*module-info*</exclude>
                                    </excludes>
                                </filter>
                                <filter> <!-- Disable JAR signing as only some of the JARs would be signed, creating problems. -->
                                    <artifact>*:*</artifact>
                                    <excludes>
                                        <excludes>META-INF/*.SF</excludes>
                                        <excludes>META-INF/*.DSA</excludes>
                                        <excludes>META-INF/*.RSA</excludes>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"/>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>org.optaplanner.sdb.ScoreDirectorBenchmark</Main-Class>
                                        <Multi-Release>true</Multi-Release>
                                    </manifestEntries>
                                </transformer>
                                <transformer implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>META-INF/kie.conf</resource>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>
            </plugin>
        </plugins>
    </build>

</project>
